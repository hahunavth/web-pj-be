// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Định nghĩa database schema

generator client {
  provider = "prisma-client-js"
}

// Config để auto gen typescript type từ file schema này.
// Khi không dùng đến cần commment lại

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated-dto/"
//   outputToNestJsResourceStructure = "true"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "true"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = "Entity"
//   fileNamingStyle                 = "kebab"
// }

// Generate rule:
// - @default -> Mất trong create, updaate
// - @unique -> Có trong connect

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// OK
// NOTE:
//  comment với /// là để định nghĩa thêm trong khi generate typescript type
//  comment với // là comment bình thường
model User {
  id       Int    @id @default(autoincrement())
  /// @IsString()
  email    String @unique
  /// @IsString()
  name     String
  /// @IsString()
  password String
  /// @IsString()
  phone    String

  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  gender Gender @default(value: OTHER)
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  role   Role   @default(value: USER)

  //
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  //
  Order     Order[]
  Feedback  Feedback[]
  UserCart  UserCart[]
  UserToken UserToken? // 1-1
}

model UserToken {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  /// @IsString()
  token     String
  //
  /// @DtoReadOnly
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId])
}

model Book {
  id       Int    @id @default(autoincrement())
  /// @IsString()
  author   String
  /// @IsString()
  category String

  /// @IsNumber()
  /// @Min(0)
  numOfPages Int
  /// @IsString()
  publisher  String
  /// @IsNumber()
  /// @Min(0)
  price      Int

  /// @Type(() => Date){'class-transformer'}
  /// @IsDate()
  // @DtoCreateOptional
  // @DtpUpdateOptional
  publishDate DateTime @default(now())
  /// @IsString()
  coverType   String

  Feedback  Feedback[]
  UserCart  UserCart[]
  OrderItem OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id      Int    @id @default(autoincrement())
  /// @IsString()
  comment String

  /// @IsNumber()
  /// @Max(5)
  /// @Min(1)
  star   Int // 1 - 5
  //
  // NOTE: REQUIRE ON CREATE
  userId Int
  user   User @relation(fields: [userId], references: [id])
  // NOTE: REQUIRE ON CREATE
  bookId Int
  book   Book @relation(fields: [bookId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TODO: Rename UserCart -> UserCartItem
model UserCart {
  /// @IsNumber()
  /// @Min(1)
  quantity Int

  // NOTE: UserCartItem sẽ bị xóa khi user hoặc book bị xóa.
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId Int
  book   Book @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, bookId])
}

model Card {
  id       Int    @id @default(autoincrement())
  /// @IsNumber()
  cvvCode  Int
  /// @IsString()
  cardCode String
  /// @IsString()
  owner    String

  /// @Type(() => Date){'class-transformer'}
  /// @IsDate()
  dateExpired DateTime

  PaymentTransaction PaymentTransaction?
}

model PaymentTransaction {
  id      Int    @id @default(autoincrement())
  /// @IsString()
  content String
  /// @IsString()
  method  String

  card    Card     @relation(fields: [cardId], references: [id])
  cardId  Int      @unique
  invoice Invoice? // 1 - 1

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id          Int @id @default(autoincrement())
  /// @IsNumber()
  /// @Min(0)
  totalAmount Int

  // NOTE: NOT REQUIRE ON CREATE
  paymentTransaction   PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
  paymentTransactionId Int?                @unique
  order                Order?
}

model Order {
  id           Int    @id @default(autoincrement())
  /// @IsString()
  address      String
  /// @IsNumber()
  /// @Min(0)
  shippingFees Int

  // NOTE: NOT REQUIRE ON CREATE
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId Int?     @unique
  // NOTE: REQUIRE ON CREATE
  User      User     @relation(fields: [userId], references: [id])
  userId    Int

  orderItem OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  /// @IsNumber()
  /// @Min(1)
  quantity Int
  /// @IsNumber()
  /// @Min(0)
  price    Int

  // NOTE: REQUIRE ON CREATE
  book    Book  @relation(fields: [bookId], references: [id])
  bookId  Int
  // NOTE: REQUIRE ON CREATE
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  @@id([bookId, orderId])
}
