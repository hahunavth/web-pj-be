// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String
  password  String
  gender    Gender
  role      Role
  phone     String
  // 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // 
  Order     Order[]
  Feedback  Feedback[]
  UserCart  UserCart[]
  UserToken UserToken? // 1-1
}

model UserToken {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  token     String
  // 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId])
}

model Book {
  id          Int         @id @default(autoincrement())
  author      String
  category    String
  numOfPages  Int
  publisher   String
  price       Int
  publishDate DateTime    @unique @default(now())
  coverType   String
  Feedback    Feedback[]
  UserCart    UserCart[]
  OrderItem   OrderItem[]
}

model Feedback {
  comment String
  star    Int // 1 - 5
  // 
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  book    Book   @relation(fields: [bookId], references: [id])
  bookId  Int

  @@id([userId, bookId])
}

model UserCart {
  quantity Int
  // 
  user     User @relation(fields: [userId], references: [id])
  userId   Int
  book     Book @relation(fields: [bookId], references: [id])
  bookId   Int

  @@id([userId, bookId])
}

model Card {
  id          Int      @id @default(autoincrement())
  cvvCode     Int
  cardCode    String
  owner       String
  dateExpired DateTime

  PaymentTransaction PaymentTransaction?
}

model PaymentTransaction {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  method    String

  card    Card     @relation(fields: [cardId], references: [id])
  cardId  Int      @unique
  invoice Invoice? // 1 - 1
}

model Invoice {
  id          Int @id @default(autoincrement())
  totalAmount Int

  paymentTransaction   PaymentTransaction @relation(fields: [paymentTransactionId], references: [id])
  paymentTransactionId Int                @unique
  order                Order?
}

model Order {
  id           Int    @id @default(autoincrement())
  address      String
  shippingFees Int

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int     @unique
  User      User    @relation(fields: [userId], references: [id])
  userId    Int

  orderItem OrderItem[]
}

model OrderItem {
  quantity Int
  price    Int

  book    Book  @relation(fields: [bookId], references: [id])
  bookId  Int
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  @@id([bookId, orderId])
}
